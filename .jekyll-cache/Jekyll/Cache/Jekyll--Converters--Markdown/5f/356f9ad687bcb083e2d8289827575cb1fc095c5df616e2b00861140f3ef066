I"?;<blockquote>
  <p><em>죄송합니다. 이거 보여주려고 반말로 어그로 끌었습니다.</em><br />
<em>내가 알던 그 기능 없는 찐따 깡통 같던 옛날 자바의 Enum 맞나?</em> <br />
<em>Enum 은 전설이다.. 가슴이 웅장해진다..</em></p>
</blockquote>

<!--more-->

<p><br /></p>

<h2>Kotlin Enum</h2>

<p>Enum 클래스는 많은 언어에서 지원하고 있으며, 조금 C언어나 Java 1.5 버전등 오래된 언어에서는 주로 대부분 데이터 타입을 분류하는 <mark>Flag</mark> 역할과 <mark>상수를 저장하는</mark> 역할 두 가지의 역할로 사용하고 있습니다. <br /></p>

<p>Swift, Kotlin 등 현대 언어에서의 Enum에는 추가적으로 강력한 기능들이 존재하는데, 예전 방식에 영향을 받아 Kotlin에서도 Flag와 상수값 저장 두가지 역할을 주로 수행하도록 구현되는 것 같습니다. <br /> <del>본인도 포함</del> <br /></p>

<p>Kotlin Enum에 대해 견문을 조금 더 넓혀보는 기회를 만들어보고자 포스팅하였습니다.</p>

<p><br /></p>

<h2>Kotlin의 Enum 기본 사용법</h2>

<blockquote>
  <p>Kotlin의 Enum은 Comparable 인터페이스를 구현하는 Abstract Class입니다. <br />
Comparable을 구현함으로써 비교가 가능해지지만, <br />
그것보다는 추상클래스임을 인지하는 것이 중요합니다.</p>
</blockquote>

<ul>
  <li>Enum 클래스 멤버
    <ul>
      <li>변수
        <ul>
          <li>name : 호출하는 Enum value의 이름을 반환합니다.</li>
          <li>ordinal : 호출하는 Enum value의 인덱스를 반환합니다.</li>
        </ul>
      </li>
      <li>함수 : 자체적인 함수는 없고, 상속받은 함수들만 있습니다.
        <ul>
          <li>Cloneable -&gt; clone()</li>
          <li>Comparable -&gt; compareTo() : 두 Enum value 간 인덱스의 차를 반환합니다</li>
          <li>Any -&gt; 있는 equals, hashCode, toString</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>kotlin 1.1 부터 추가된 확장함수들
    <ul>
      <li>enumValues&lt;Enum<T>&gt;() : 해당 Enum의 value를 배열로 만들어 반환합니다.</T></li>
      <li>enumValueOf&lt;Enum<T>&gt;(name : String) : 해당 enum에 name의 이름을 가진 요소를 찾아 반환합니다.</T></li>
    </ul>
  </li>
</ul>

<h4>말이 어려워서 그렇지.. 아래 예제 보시면 금방 이해 되실 겁니다.</h4>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">enum</span> <span class="kd">class</span> <span class="nc">GarbageType1</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">koName</span> <span class="p">:</span> <span class="nc">String</span>
<span class="p">){</span>
    <span class="nc">PLASTIC</span><span class="p">(</span><span class="s">"플라스틱"</span><span class="p">),</span>
    <span class="nc">GLASS</span><span class="p">(</span><span class="s">"유리"</span><span class="p">),</span>
    <span class="nc">IRON</span><span class="p">(</span><span class="s">"고철"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 위에 정의한 IRON 이라는 이름값을 얻을 수 있습니다.</span>
    <span class="c1">//"IRON", String</span>
    <span class="nf">println</span><span class="p">(</span><span class="nc">GarbageType1</span><span class="p">.</span><span class="nc">IRON</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> 

    <span class="c1">// zero-base index, PLASTIC은 첫 번째 임으로 0이 반환됩니다.</span>
    <span class="c1">// 0, Int</span>
    <span class="nf">println</span><span class="p">(</span><span class="nc">GarbageType1</span><span class="p">.</span><span class="nc">PLASTIC</span><span class="p">.</span><span class="n">ordinal</span><span class="p">)</span> 

    <span class="c1">// IRON 세 번째 임으로 2가 반환 됩니다.</span>
    <span class="c1">// 2, Int </span>
    <span class="nf">println</span><span class="p">(</span><span class="nc">GarbageType1</span><span class="p">.</span><span class="nc">IRON</span><span class="p">.</span><span class="n">ordinal</span><span class="p">)</span> 

    <span class="c1">// 아래 두 함수는 kotlin 1.1 버전부터 지원됩니다</span>
    <span class="cm">/***</span><span class="err">
</span><span class="cm">     * Enum의 요소를 차례로 배열로 만들어줍니다</span><span class="err">
</span><span class="cm">     * array == arrayOf(</span><span class="err">
</span><span class="cm">     *    GarbageType1.PLASTIC,</span><span class="err">
</span><span class="cm">     *    GarbageType1.GLASS,</span><span class="err">
</span><span class="cm">     *    GarbageType1.IRON</span><span class="err">
</span><span class="cm">     * )</span><span class="err">
</span><span class="cm">     */</span>
    <span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="n">enumValues</span><span class="p">&lt;</span><span class="nc">GarbageType1</span><span class="p">&gt;()</span>

    <span class="c1">// iterable이기 때문에 map, filter 등 도 가능합니다.</span>
    <span class="n">array</span>
        <span class="p">.</span><span class="nf">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">koName</span> <span class="p">==</span> <span class="s">"플라스틱"</span> <span class="p">}</span>
        <span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">koName</span> <span class="p">}</span>
    
    <span class="cm">/***</span><span class="err">
</span><span class="cm">     * GarbageType1에 PLASTIC 이라는 이름을 가진 요소를 반환합니다.</span><span class="err">
</span><span class="cm">     * type == GarbageType1.PLASTIC</span><span class="err">
</span><span class="cm">     */</span>
    <span class="kd">val</span> <span class="py">type</span> <span class="p">=</span> <span class="n">enumValueOf</span><span class="p">&lt;</span><span class="nc">GarbageType1</span><span class="p">&gt;(</span><span class="s">"PLASTIC"</span><span class="p">)</span> 
<span class="p">}</span></code></pre></figure>

<p><br /></p>

<h2>Enum 실제 사용 (예시 프로젝트)</h2>

<blockquote>
  <p>해당 고물의 종류와 무게를 입력받아, 아래표를 기반으로 총 가격이 얼마인지 <br />
알려주는 프로그램을 만들어보면서 Enum에 대해 더 알아 보겠습니다.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>분류</th>
      <th>10kg 미만</th>
      <th>10kg이상 30kg미만</th>
      <th>30kg 초과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>플라스틱</td>
      <td>100원</td>
      <td>150원</td>
      <td>200원</td>
    </tr>
    <tr>
      <td>유리</td>
      <td>150원</td>
      <td>250원</td>
      <td>300원</td>
    </tr>
    <tr>
      <td>고철</td>
      <td>200원</td>
      <td>250원</td>
      <td>300원</td>
    </tr>
  </tbody>
</table>

<p><em>단위 : kg당</em></p>

<p><br /></p>

<h2>고전적인 방식</h2>

<blockquote>
  <p>Enum 의 고전적인 처리방법은 Enum을 Flag 삼아 조건분기를 처리하는 것입니다. <br />
아래 코드의 문제점은 Enum이 가지는 책임(쓰레기의 종류를 분류하는 책임)이 <br /> 
sell함수에 전가되어 있다는 부분입니다.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">enum</span> <span class="kd">class</span> <span class="nc">GarbageType2</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">koName</span><span class="p">:</span> <span class="nc">String</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">PLASTIC</span><span class="p">(</span><span class="s">"플라스틱"</span><span class="p">),</span>
    <span class="nc">GLASS</span><span class="p">(</span><span class="s">"유리"</span><span class="p">),</span>
    <span class="nc">IRON</span><span class="p">(</span><span class="s">"고철"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 플라스틱 20키로를 표현했습니다.</span>
    <span class="kd">val</span> <span class="py">pair</span> <span class="p">=</span> <span class="m">20</span> <span class="n">to</span> <span class="nc">GarbageType2</span><span class="p">.</span><span class="nc">PLASTIC</span>

    <span class="c1">// 총 가격을 구해옵니다.</span>
    <span class="kd">val</span> <span class="py">totalPrice</span> <span class="p">=</span> <span class="nf">sell</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>

    <span class="c1">// 총 가격은 3000입니다 출력 </span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"총 가격은 $totalPrice 입니다."</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 판매 가격 알아내기</span>
<span class="k">private</span> <span class="k">fun</span> <span class="nf">sell</span><span class="p">(</span><span class="n">pair</span><span class="p">:</span> <span class="nc">Pair</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">GarbageType2</span><span class="p">&gt;):</span> <span class="nc">Int</span> <span class="p">{</span>
    <span class="c1">// 분해할당으로 weight는 20, type GarbageType2.PLASTIC이 할당됩니다.</span>
    <span class="kd">val</span> <span class="p">(</span><span class="py">weight</span><span class="p">,</span> <span class="py">type</span><span class="p">)</span> <span class="p">=</span> <span class="n">pair</span>

    <span class="c1">// 현재 가져온 고물의 종류와 무게로 kg당 얼마인지 가져옵니다.</span>
    <span class="c1">// Enum을 아이템을 분류하는 Flag로 삼아 조건 분기합니다.</span>
    <span class="kd">val</span> <span class="py">price</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">GarbageType2</span><span class="p">.</span><span class="nc">PLASTIC</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="k">when</span> <span class="p">(</span><span class="n">weight</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">in</span> <span class="m">0</span><span class="o">..</span><span class="m">10</span> <span class="p">-&gt;</span> <span class="m">100</span>
                <span class="k">in</span> <span class="m">10</span><span class="o">..</span><span class="m">29</span> <span class="p">-&gt;</span> <span class="m">150</span>
                <span class="k">in</span> <span class="m">30</span><span class="o">..</span><span class="nc">Int</span><span class="p">.</span><span class="nc">MAX_VALUE</span> <span class="p">-&gt;</span> <span class="m">200</span>
                <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">throw</span> <span class="nc">EnumValueMisMathedException</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nc">GarbageType2</span><span class="p">.</span><span class="nc">GLASS</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="k">when</span><span class="p">(</span><span class="n">weight</span><span class="p">){</span>
                <span class="k">in</span> <span class="m">0</span><span class="o">..</span><span class="m">10</span> <span class="p">-&gt;</span> <span class="m">150</span>
                <span class="k">in</span> <span class="m">10</span><span class="o">..</span><span class="m">29</span> <span class="p">-&gt;</span> <span class="m">250</span>
                <span class="k">in</span> <span class="m">30</span><span class="o">..</span><span class="nc">Int</span><span class="p">.</span><span class="nc">MAX_VALUE</span> <span class="p">-&gt;</span> <span class="m">300</span>
                <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">throw</span> <span class="nc">EnumValueMisMathedException</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nc">GarbageType2</span><span class="p">.</span><span class="nc">IRON</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="k">when</span><span class="p">(</span><span class="n">weight</span><span class="p">){</span>
                <span class="k">in</span> <span class="m">0</span><span class="o">..</span><span class="m">10</span> <span class="p">-&gt;</span> <span class="m">100</span>
                <span class="k">in</span> <span class="m">10</span><span class="o">..</span><span class="m">29</span> <span class="p">-&gt;</span> <span class="m">150</span>
                <span class="k">in</span> <span class="m">30</span><span class="o">..</span><span class="nc">Int</span><span class="p">.</span><span class="nc">MAX_VALUE</span> <span class="p">-&gt;</span> <span class="m">200</span>
                <span class="k">else</span> <span class="p">-&gt;</span> <span class="k">throw</span> <span class="nc">EnumValueMisMathedException</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">weight</span> <span class="p">*</span> <span class="n">price</span>
<span class="p">}</span></code></pre></figure>

<p><br /></p>

<h2>Enum에게 함수 쥐어주기</h2>

<blockquote>
  <p>Enum이 Flag 이외의 기능을 하지 않는게 꼴보기 싫으신가요? <del>Enum이 꿀빤다…후…</del> <br />
Enum 또한 추상클래스이기 때문에 기능을 가질 수 있습니다. <br />
Enum에게 기능을 제공해 줌으로써, sell 함수에게 전가된 책임을 가져올 수 있습니다. <br />
<del>일해라 Enum d(^~^)b</del></p>
</blockquote>

<h2>인터페이스 상속</h2>

<p>##</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="kd">val</span> <span class="py">a</span> <span class="p">=</span> <span class="m">10</span>

<span class="k">fun</span> <span class="nf">test</span><span class="p">(</span><span class="n">a</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">String</span><span class="p">{</span>
    <span class="k">return</span> <span class="s">"$a"</span>
<span class="p">}</span>

<span class="nf">test</span><span class="p">(</span><span class="n">a</span><span class="p">)</span></code></pre></figure>

:ET